#!/bin/bash
set -e

# Function to detect Pi model
detect_pi_model() {
    if grep -q "Raspberry Pi.*5" /proc/cpuinfo 2>/dev/null; then
        echo "pi5"
    elif grep -q "Raspberry Pi.*4" /proc/cpuinfo 2>/dev/null; then
        echo "pi4"
    else
        echo "unknown"
    fi
}


# Determines if running on a single pi by determining how many cameras are attached
# Returns 0 if this is a single-pi setup (with 2 cameras on the same pi) or 1 if not
is_single_pi() {

    LINE_COUNT=$(rpicam-hello --list 2>/dev/null | grep -E "^\s*[0-9]+ :" | wc -l )

    if [[ $LINE_COUNT == "2" ]]; then
        return 0
    else
        return 1
    fi
}



case "$1" in
    configure)
        echo "Configuring PiTrac..."

        # Detect Pi model
        PI_MODEL=$(detect_pi_model)
        echo "Detected Pi model: $PI_MODEL"

        # Create tomee user/group
        if ! getent group tomee >/dev/null; then
            groupadd -r tomee
        fi
        if ! getent passwd tomee >/dev/null; then
            useradd -r -g tomee -d /opt/tomee -s /bin/false tomee
        fi

        # Get the actual user who invoked sudo (if any)
        ACTUAL_USER="${SUDO_USER:-}"
        if [ -z "$ACTUAL_USER" ]; then
            echo "Note: Run 'pitrac setup' as your regular user to complete setup"
        else
            # Add user to required groups
            usermod -a -G video,gpio,i2c,spi,dialout "$ACTUAL_USER" 2>/dev/null || true

            # Create user directories
            USER_HOME=$(getent passwd "$ACTUAL_USER" | cut -d: -f6)
            if [ -n "$USER_HOME" ] && [ -d "$USER_HOME" ]; then
                mkdir -p "$USER_HOME/.pitrac"/{config,cache,state,calibration}
                mkdir -p "$USER_HOME/LM_Shares"/{Images,WebShare}
                chown -R "$ACTUAL_USER:$ACTUAL_USER" "$USER_HOME/.pitrac" "$USER_HOME/LM_Shares"

                # Copy default config to user directory if it doesn't exist
                if [ ! -f "$USER_HOME/.pitrac/config/pitrac.yaml" ]; then
                    cp /etc/pitrac/pitrac.yaml "$USER_HOME/.pitrac/config/pitrac.yaml"
                    chown "$ACTUAL_USER:$ACTUAL_USER" "$USER_HOME/.pitrac/config/pitrac.yaml"
                fi
            fi
        fi

        # System config should be root-owned and world-readable
        chown root:root /etc/pitrac
        chmod 755 /etc/pitrac
        chown root:root /etc/pitrac/pitrac.yaml
        chmod 644 /etc/pitrac/pitrac.yaml
        if [ -f /etc/pitrac/golf_sim_config.json ]; then
            chown root:root /etc/pitrac/golf_sim_config.json
            chmod 644 /etc/pitrac/golf_sim_config.json
        fi

        # Set TomEE permissions
        chown -R tomee:tomee /opt/tomee
        chmod 755 /opt/tomee/bin/*.sh

        # Apply Boost C++20 fix
        if [ -f /usr/include/boost/asio/awaitable.hpp ] && ! grep -q "#include <utility>" /usr/include/boost/asio/awaitable.hpp; then
            echo "Applying Boost 1.74 C++20 compatibility fix..."
            sed -i '/namespace boost {/i #include <utility>' /usr/include/boost/asio/awaitable.hpp
        fi

        # Configure boot settings - Bookworm uses /boot/firmware for both Pi 4 and Pi 5
        if [ -f "/boot/firmware/config.txt" ]; then
            CONFIG_FILE="/boot/firmware/config.txt"
        elif [ -f "/boot/config.txt" ] && ! grep -q "DO NOT EDIT THIS FILE" /boot/config.txt 2>/dev/null; then
            CONFIG_FILE="/boot/config.txt"
        else
            # Default to new location
            CONFIG_FILE="/boot/firmware/config.txt"
        fi

        if [ -f "$CONFIG_FILE" ]; then
            echo "Configuring boot settings in $CONFIG_FILE..."

            # Add settings if not present
            grep -q "camera_auto_detect=1" "$CONFIG_FILE" || echo "camera_auto_detect=1" >> "$CONFIG_FILE"
            grep -q "dtparam=i2c_arm=on" "$CONFIG_FILE" || echo "dtparam=i2c_arm=on" >> "$CONFIG_FILE"
            grep -q "dtparam=spi=on" "$CONFIG_FILE" || echo "dtparam=spi=on" >> "$CONFIG_FILE"
            grep -q "force_turbo=1" "$CONFIG_FILE" || echo "force_turbo=1" >> "$CONFIG_FILE"

            if [ "$PI_MODEL" = "pi5" ]; then
                grep -q "arm_boost=1" "$CONFIG_FILE" || echo "arm_boost=1" >> "$CONFIG_FILE"
            else
                grep -q "gpu_mem=256" "$CONFIG_FILE" || echo "gpu_mem=256" >> "$CONFIG_FILE"
            fi


            # If running in single-pi mode, both Pi and Innomaker cameras need a kernel dtoverlay setting
            # in order to have one camera triggered internally and the other externally

            if is_single_pi ; then
                echo "Running in single-pi mode, so setting up triggering in config.txt"
                grep -q "dtoverlay=imx296,sync-sink" "$CONFIG_FILE" || echo -e "# Setup camera triggering (slot 0 internal, slot 1 external\ndtoverlay=imx296,sync-sink=1\ndtoverlay=imx296,cam0" >> "$CONFIG_FILE"
            else
                grep -q "Not running in single pi mode" "$CONFIG_FILE" || echo "# Not running in single pi mode, so no dtoverlays required." >> "$CONFIG_FILE"
            fi

        fi

        # Configure libcamera settings
        echo "Configuring libcamera..."
        
        # Use existing example.yaml files as base for configuration
        # Both Pi 4 (vc4) and Pi 5 (pisp) ship with example.yaml
        for pipeline in pisp vc4; do
            CAMERA_DIR="/usr/share/libcamera/pipeline/rpi/${pipeline}"
            EXAMPLE_FILE="${CAMERA_DIR}/example.yaml"
            CAMERA_CONFIG="${CAMERA_DIR}/rpi_apps.yaml"
            
            # Only proceed if the pipeline directory exists (Pi 4 has vc4, Pi 5 has pisp)
            if [ -d "$CAMERA_DIR" ]; then
                # If example exists but rpi_apps doesn't, copy and configure
                if [ -f "$EXAMPLE_FILE" ] && [ ! -f "$CAMERA_CONFIG" ]; then
                    echo "Creating ${pipeline} config from example..."
                    cp "$EXAMPLE_FILE" "$CAMERA_CONFIG"
                    # Uncomment and set the camera timeout to 1 second (1000000 ms)
                    sed -i 's/# *"camera_timeout_value_ms": *[0-9]*/"camera_timeout_value_ms": 1000000/' "$CAMERA_CONFIG"
                elif [ -f "$CAMERA_CONFIG" ]; then
                    # Config exists, check if timeout needs updating
                    if grep -q '# *"camera_timeout_value_ms"' "$CAMERA_CONFIG"; then
                        echo "Updating ${pipeline} camera timeout..."
                        sed -i 's/# *"camera_timeout_value_ms": *[0-9]*/"camera_timeout_value_ms": 1000000/' "$CAMERA_CONFIG"
                    fi
                fi
            fi
        done
        # Update library cache
        ldconfig

        # Reload systemd
        systemctl daemon-reload

        # Configure ActiveMQ instance
        if [ -d /etc/activemq/instances-available ] && [ ! -e /etc/activemq/instances-enabled/main ]; then
            echo "Enabling ActiveMQ main instance..."
            # Ensure directory exists and clean up any existing instances
            mkdir -p /etc/activemq/instances-enabled
            rm -f /etc/activemq/instances-enabled/*
            ln -sf /etc/activemq/instances-available/main /etc/activemq/instances-enabled/main

            # Create directories for ActiveMQ
            mkdir -p /var/lib/activemq/main
            mkdir -p /var/lib/activemq/conf
            mkdir -p /var/lib/activemq/data
            mkdir -p /var/lib/activemq/tmp

            # Copy configs to instance directory
            if [ -f /etc/activemq/instances-available/main/activemq.xml ]; then
                cp /etc/activemq/instances-available/main/activemq.xml /var/lib/activemq/main/ 2>/dev/null || true
            fi
            if [ -f /etc/activemq/instances-available/main/log4j2.properties ]; then
                cp /etc/activemq/instances-available/main/log4j2.properties /var/lib/activemq/main/ 2>/dev/null || true
            fi

            # Also copy to /var/lib/activemq/conf where ActiveMQ actually looks
            if [ -f /etc/activemq/instances-available/main/activemq.xml ]; then
                cp /etc/activemq/instances-available/main/activemq.xml /var/lib/activemq/conf/ 2>/dev/null || true
            fi
            if [ -f /etc/activemq/instances-available/main/log4j2.properties ]; then
                cp /etc/activemq/instances-available/main/log4j2.properties /var/lib/activemq/conf/ 2>/dev/null || true
            fi

            # Set proper ownership for ALL ActiveMQ directories
            if getent passwd activemq >/dev/null; then
                chown -R activemq:activemq /var/lib/activemq/
            fi

            # Don't start it here - let the user or pitrac CLI handle it
        fi

        if [ -x /usr/lib/pitrac/service-install.sh ]; then
            if [ -n "$ACTUAL_USER" ]; then
                echo "Installing PiTrac service for user: $ACTUAL_USER"
                /usr/lib/pitrac/service-install.sh install "$ACTUAL_USER" || true
            else
                echo "Note: PiTrac service not installed. Run '/usr/lib/pitrac/service-install.sh install <username>' to install for a specific user"
            fi
        fi
        
        systemctl enable tomee.service || true

        echo ""
        echo "======================================"
        echo " PiTrac installed!"
        echo "======================================"
        echo ""
        echo "Get started:"
        echo "  pitrac setup    - Set up your directories"
        echo "  pitrac test     - Check your cameras"
        echo "  pitrac run      - Start tracking shots"
        echo ""
        echo "The broker and web server start automatically when you run PiTrac."
        echo ""
        echo "Need help? Try 'pitrac help' or 'pitrac status'"
        echo ""

        # Suggest reboot if Pi model detected
        if [ "$PI_MODEL" != "unknown" ]; then
            echo "Note: A reboot is recommended to apply boot configuration changes."
        fi
        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        ;;

    *)
        echo "postinst called with unknown argument: $1" >&2
        exit 1
        ;;
esac

exit 0
