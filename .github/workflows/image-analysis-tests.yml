---
name: Image Analysis Tests
on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
env:
  BOOST_VERSION: 1.84.0
  BOOST_MSVC_VERSION: "14.3"
jobs:
  camera-tests:
    name: Image Analysis Tests
    runs-on: windows-latest
    defaults:
      run:
        working-directory: Software/LMSourceCode/ImageProcessing/ImageAnalysis
    steps:      
      - name: Checkout code
        uses: actions/checkout@v4   

      - name: Cache OpenCV
        uses: actions/cache@v3
        with:
          path: C:\opencv
          key: ${{ runner.os }}-opencv-4.10.0-binaries
          restore-keys: |
            ${{ runner.os }}-opencv-4.10.0-

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.20"          

      - name: Install OpenCV
        run: |
          if (-not (Test-Path "C:\opencv")) {
            Write-Host "Installing OpenCV 4.10.0..."
            $url = "https://github.com/opencv/opencv/releases/download/4.10.0/opencv-4.10.0-windows.exe"
            $output = "$env:TEMP\opencv-4.10.0-windows.exe"
            
            Invoke-WebRequest -Uri $url -OutFile $output
            Move-Item -Path $output -Destination "C:\opencv.exe" -Force
            Start-Process -FilePath "C:\opencv.exe" -ArgumentList "-o", "C:\opencv", "-y" -Wait
            Remove-Item "C:\opencv.exe"
            
            Write-Host "✓ OpenCV installation complete"
          } else {
            Write-Host "✓ OpenCV found in cache"
          }
        shell: pwsh

      - name: Install boost
        uses: MarkusJx/install-boost@v2
        id: install-boost
        with:
          boost_version: ${{ env.BOOST_VERSION }}
          boost_install_dir: C:\Dev_Env\
          platform_version: 2022
          toolset: msvc

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64      
          
      - name: Configure CMake
        run: |
          # Clean build directory
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          if (Test-Path CMakeCache.txt) { Remove-Item CMakeCache.txt -Force }
          mkdir build
          # Verify required paths exist (CMakeLists.txt hardcodes these)
          Write-Host "Verifying hardcoded paths:"
          Write-Host "  OpenCV: $(Test-Path 'C:\opencv\build\OpenCVConfig.cmake')"
          Write-Host "  Boost: $(Test-Path 'C:\Dev_Env\boost\boost\include\boost-1_84')"
          
          # Simple CMake call - all paths hardcoded in CMakeLists.txt
          Write-Host "Running CMake..."
          cmake . -DCMAKE_BUILD_TYPE=Release -B build
          
          # Check if CMake found our hardcoded Boost setup
          if (Test-Path "build/CMakeCache.txt") {
            $boostCheck = Select-String -Path "build/CMakeCache.txt" -Pattern "Boost.*LIBRARY" -Quiet
            if ($boostCheck) {
              Write-Host "⚠ Warning: CMake still found Boost libraries despite header-only setup"
            } else {
              Write-Host "✓ CMake using header-only Boost (no library references found)"
            }
          }
        shell: pwsh
        
      - name: Build tests
        run: |
          pushd build
          cmake --build . --config Release
          popd
        shell: pwsh

      - name: Approval Tests
        run: |
          ./build/Release/test_approval_with_pitrac_images.exe
        shell: pwsh      
      
      - name: Domain Tests
        run: |
          ./build/Release/test_image_analysis_domain.exe
        shell: pwsh
      
      - name: OpenCV Tests
        run: |
          ./build/Release/test_opencv_analyzer.exe
        shell: pwsh
