---
name: Image Analysis Tests
on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
env:
  BOOST_VERSION: 1.87.0
  BOOST_ROOT: C:\Dev_Env\boost\boost
  OPENCV_DIR: C:\tools\opencv
jobs:
  camera-tests:
    name: Image Analysis Tests
    runs-on: windows-latest
    defaults:
      run:
        working-directory: Software/LMSourceCode/ImageProcessing/ImageAnalysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4   

      - name: Cache OpenCV
        uses: actions/cache@v3
        with:
          path: ${{ env.OPENCV_DIR }}
          key: ${{ runner.os }}-opencv-4.10.0-binaries
          restore-keys: |
            ${{ runner.os }}-opencv-4.10.0-

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "4.0.3"

      - name: Install OpenCV
        run: |
          if (-not (Test-Path "$env:OPENCV_DIR")) {
            Write-Host "Installing OpenCV 4.10.0..."
            New-Item -ItemType Directory -Path C:\tools -Force
            pushd C:\tools
            $url = "https://github.com/opencv/opencv/releases/download/4.10.0/opencv-4.10.0-windows.exe"
            Invoke-WebRequest -Uri $url -OutFile "opencv.exe"
            Start-Process -FilePath "opencv.exe" -ArgumentList "-o", "$env:OPENCV_DIR", "-y" -Wait
            Remove-Item "opencv.exe"
            Write-Host "✓ OpenCV installed at $env:OPENCV_DIR"
            popd
          } else {
            Write-Host "✓ OpenCV found in cache"
          }
        shell: pwsh      
        
      - name: Install boost
        uses: MarkusJx/install-boost@v2
        with:
          boost_version: ${{ env.BOOST_VERSION }}
          boost_install_dir: C:\Dev_Env\
          platform_version: 2022
          toolset: msvc

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64      

      - name: Configure CMake
        run: |
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          mkdir build
          
          $OpenCVConfigPath = "$env:OPENCV_DIR\build"
          
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DOPENCV_DIR="$OpenCVConfigPath"
        shell: pwsh
      - name: Build and Test
        run: |
          pushd build
          cmake --build . --config Release
          
          Write-Host "=== Debugging Test Executables ===" -ForegroundColor Cyan
          
          # Check if test executables exist
          Write-Host "Checking for test executables..."
          Get-ChildItem -Path "Release" -Filter "test_*.exe" | ForEach-Object {
            Write-Host "Found: $($_.Name)" -ForegroundColor Green
          }
          
          # Try to run the simplest test directly with a timeout
          Write-Host "Attempting to run test_image_analysis_domain.exe directly..."
          $testPath = "Release\test_image_analysis_domain.exe"
          if (Test-Path $testPath) {
            Write-Host "Executable exists, attempting to run with 10 second timeout..."
            try {
              # Use Start-Process with timeout to see if it hangs
              $process = Start-Process -FilePath $testPath -ArgumentList "--version" -PassThru -NoNewWindow -RedirectStandardOutput "test_output.txt" -RedirectStandardError "test_error.txt"
              $process | Wait-Process -Timeout 10
              if (-not $process.HasExited) {
                Write-Host "Process is hanging! Killing it..." -ForegroundColor Red
                $process | Stop-Process -Force
                Write-Host "Process killed - this confirms hanging issue" -ForegroundColor Red
              } else {
                Write-Host "Process completed with exit code: $($process.ExitCode)" -ForegroundColor Green
                if (Test-Path "test_output.txt") {
                  Write-Host "=== STDOUT ===" -ForegroundColor Yellow
                  Get-Content "test_output.txt"
                }
                if (Test-Path "test_error.txt") {
                  Write-Host "=== STDERR ===" -ForegroundColor Yellow
                  Get-Content "test_error.txt"
                }
              }
            } catch {
              Write-Host "Error running test: $($_.Exception.Message)" -ForegroundColor Red
            }
          } else {
            Write-Host "Test executable not found at: $testPath" -ForegroundColor Red
          }
          
          # Check dependencies with dumpbin if available
          Write-Host "Checking dependencies of test executable..."
          try {
            & dumpbin /dependents $testPath 2>$null | Select-String -Pattern "\.dll"
          } catch {
            Write-Host "dumpbin not available or failed"
          }
          
          Write-Host "=== End Debug Section ===" -ForegroundColor Cyan
          
          ctest -C Release --output-on-failure
          popd
        shell: pwsh
